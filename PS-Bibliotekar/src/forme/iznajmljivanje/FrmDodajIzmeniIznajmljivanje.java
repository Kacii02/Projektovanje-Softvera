/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme.iznajmljivanje;

import communication.Communication;
import forme.knjiga.TableModelKnjiga;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import model.Bibliotekar;
import model.Clan;
import model.Iznajmljivanje;
import model.Knjiga;
import model.Status;
import model.StavkaIznajmljivanja;
import model.pomocni.IznajmljivanjeSaStavkama;

/**
 *
 * @author kacan
 */
public class FrmDodajIzmeniIznajmljivanje extends javax.swing.JFrame {

    Communication communication;
    FrmIznajmljivanje parent;
    Bibliotekar bibliotekar;
    Clan izabraniClan;
    Iznajmljivanje izabranoIznajmljivanje;
    private List<Knjiga> sveKnjige;
    private List<StavkaIznajmljivanja> stavkeIznajmljivanja;
    DateTimeFormatter formatter;

    /**
     * Creates new form FrmDodajIzmeniIznajmljivanje
     *
     * @param bibliotekar
     * @param izabraniClan
     * @param izabranoIznajmljivanje
     */
    public FrmDodajIzmeniIznajmljivanje(FrmIznajmljivanje parent, Bibliotekar bibliotekar, Clan izabraniClan, Iznajmljivanje izabranoIznajmljivanje) {
        this.parent = parent;
        this.bibliotekar = bibliotekar;
        this.izabraniClan = izabraniClan;
        this.izabranoIznajmljivanje = izabranoIznajmljivanje;

        communication = Communication.getInstance();
        formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        initComponents();
        dobaviSveKnjige();

        if (izabranoIznajmljivanje == null) {
            stavkeIznajmljivanja = new ArrayList<>();
            dodavanjeIznajmljivanja();

        } else {
            ucitajStavkeIznajmljivanja();
            izmenaIznajmljivanja();

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblBibliotekar = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblClan = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDatumIznajmljivanja = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtRokVracanja = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKnjige = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnFiltriraj = new javax.swing.JButton();
        btnRucnoDodavanjeDatuma = new javax.swing.JButton();
        lblUnesiNapomenu = new javax.swing.JLabel();
        txtNapomena = new javax.swing.JTextField();
        btnUnesiStavku = new javax.swing.JButton();
        txtNaslov = new javax.swing.JTextField();
        txtAutor = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStavkeIznajmljivanja = new javax.swing.JTable();
        btnIzbaciIzIznajmljivanja = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        lblBrojStavkiIznajmljivanja = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnKreirajIznajmljivanje = new javax.swing.JButton();
        btnOdustani = new javax.swing.JButton();
        btnIzmeniIznajmljivanje = new javax.swing.JButton();
        cbStatus = new javax.swing.JComboBox<>();
        btnResetujFilter = new javax.swing.JButton();
        lblPromeniNapomenu = new javax.swing.JLabel();
        txtPromeniNapomenu = new javax.swing.JTextField();
        btnPromeniNapomenu = new javax.swing.JButton();
        lblKreirajNovoIzanjmljivanje = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Bibliotekar:");

        lblBibliotekar.setText("Ime bibliotekara");

        jLabel2.setText("Clan:");

        lblClan.setText("Ime clana");

        jLabel3.setText("Datum iznajmljivanja:");

        jLabel4.setText("Rok vracanja:");

        jLabel5.setText("Dodavanje knjige za iznajmljivanje");

        tblKnjige.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Naslov", "ISBN", "Autor", "Izdavac"
            }
        ));
        jScrollPane1.setViewportView(tblKnjige);

        jLabel6.setText("Filtriraj po naslovu:");

        jLabel7.setText("Filtriraj po autoru:");

        btnFiltriraj.setText("Filtriraj");
        btnFiltriraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrirajActionPerformed(evt);
            }
        });

        btnRucnoDodavanjeDatuma.setText("Dodaj datume ručno");
        btnRucnoDodavanjeDatuma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRucnoDodavanjeDatumaActionPerformed(evt);
            }
        });

        lblUnesiNapomenu.setText("Unesi napomenu:");

        btnUnesiStavku.setText("Unesi knjigu u iznajmljivanje");
        btnUnesiStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnesiStavkuActionPerformed(evt);
            }
        });

        jLabel9.setText("Knjige dodate u iznajmljivanje");

        tblStavkeIznajmljivanja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Knjiga", "Napomena"
            }
        ));
        jScrollPane2.setViewportView(tblStavkeIznajmljivanja);

        btnIzbaciIzIznajmljivanja.setText("Izbaci izabranu knjigu");
        btnIzbaciIzIznajmljivanja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzbaciIzIznajmljivanjaActionPerformed(evt);
            }
        });

        jLabel10.setText("Broj stavki iznajmljivanja: ");

        jLabel11.setText("Status:");

        btnKreirajIznajmljivanje.setText("Kreiraj iznajmljivanje");
        btnKreirajIznajmljivanje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKreirajIznajmljivanjeActionPerformed(evt);
            }
        });

        btnOdustani.setText("Odustani");
        btnOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdustaniActionPerformed(evt);
            }
        });

        btnIzmeniIznajmljivanje.setText("Izmeni iznajmljivanje");
        btnIzmeniIznajmljivanje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniIznajmljivanjeActionPerformed(evt);
            }
        });

        cbStatus.setModel(new DefaultComboBoxModel(Status.values()));

        btnResetujFilter.setText("Resetuj filter");
        btnResetujFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetujFilterActionPerformed(evt);
            }
        });

        lblPromeniNapomenu.setText("Promeni napomenu:");

        btnPromeniNapomenu.setText("Promeni napomenu");
        btnPromeniNapomenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromeniNapomenuActionPerformed(evt);
            }
        });

        lblKreirajNovoIzanjmljivanje.setForeground(new java.awt.Color(255, 0, 51));
        lblKreirajNovoIzanjmljivanje.setText("Ako želite da iznajmite novu knjigu morate kreirati novo iznajmljivanje!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtRokVracanja, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                                        .addComponent(txtDatumIznajmljivanja))
                                    .addGap(18, 18, 18)
                                    .addComponent(btnRucnoDodavanjeDatuma, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblBibliotekar))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblClan))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblKreirajNovoIzanjmljivanje))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 769, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtNaslov, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(18, 18, 18)
                                    .addComponent(btnFiltriraj, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnResetujFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPromeniNapomenu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPromeniNapomenu, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPromeniNapomenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnIzbaciIzIznajmljivanja, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 771, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblBrojStavkiIznajmljivanja)))
                                .addGap(18, 18, 18)
                                .addComponent(btnKreirajIznajmljivanje, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnIzmeniIznajmljivanje, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnOdustani, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblUnesiNapomenu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNapomena, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUnesiStavku, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 3, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(19, 19, 19))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblBibliotekar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblClan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtDatumIznajmljivanja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtRokVracanja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnRucnoDodavanjeDatuma, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblKreirajNovoIzanjmljivanje))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnResetujFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(txtNaslov, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addComponent(btnFiltriraj, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUnesiNapomenu)
                    .addComponent(txtNapomena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUnesiStavku))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnIzbaciIzIznajmljivanja)
                            .addComponent(lblPromeniNapomenu)
                            .addComponent(txtPromeniNapomenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPromeniNapomenu))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(lblBrojStavkiIznajmljivanja))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 1, Short.MAX_VALUE))
                            .addComponent(btnKreirajIznajmljivanje, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnIzmeniIznajmljivanje, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnOdustani)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFiltrirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrirajActionPerformed
        String naslovFilter = txtNaslov.getText().trim();
        String autorFilter = txtAutor.getText().trim();

        if (sveKnjige == null || sveKnjige.isEmpty()) {
            return;
        }

        // Filtriranje liste knjiga
        List<Knjiga> filtriraneKnjige = new ArrayList<>();
        for (Knjiga knjiga : sveKnjige) {
            boolean matchesNaslov = (naslovFilter.isEmpty() || knjiga.getNaslov().toLowerCase().contains(naslovFilter.toLowerCase()));
            boolean matchesAutor = (autorFilter.isEmpty() || knjiga.getAutor().toLowerCase().contains(autorFilter.toLowerCase()));

            // Ako knjizi odgovaraju oba filtera (ili samo jedan od njih), dodajemo je u filtriranu listu
            if (matchesNaslov && matchesAutor) {
                filtriraneKnjige.add(knjiga);
            }
        }

        TableModelKnjiga model = new TableModelKnjiga(filtriraneKnjige);
        tblKnjige.setModel(model);
    }//GEN-LAST:event_btnFiltrirajActionPerformed

    private void btnOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdustaniActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnOdustaniActionPerformed

    private void btnUnesiStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnesiStavkuActionPerformed
        int selectedRow = tblKnjige.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Morate izabrati knjigu iz tabele!", "Upozorenje", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Uzimanje knjige i napomene
        TableModelKnjiga modelKnjiga = (TableModelKnjiga) tblKnjige.getModel();
        Knjiga izabranaKnjiga = modelKnjiga.getKnjiga(selectedRow);
        String napomena = txtNapomena.getText().trim();

        //Nova stavka
        StavkaIznajmljivanja novaStavka = new StavkaIznajmljivanja(izabranoIznajmljivanje, izabranaKnjiga, napomena);

        //Provera da li je knjiga već dodata
        for (StavkaIznajmljivanja s : stavkeIznajmljivanja) {
            if (s.getKnjiga().getIdKnjiga() == izabranaKnjiga.getIdKnjiga()) {
                JOptionPane.showMessageDialog(this, "Ova knjiga je već dodata u iznajmljivanje.", "Greška", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }

        //Dodavanje nove stavke u listu 
        stavkeIznajmljivanja.add(novaStavka);

        //Dodavanje u tabelu
        TableModelStavkeIznajmljivanja model = new TableModelStavkeIznajmljivanja(stavkeIznajmljivanja);
        tblStavkeIznajmljivanja.setModel(model);

        //Azuriranje broja stavki na labeli
        lblBrojStavkiIznajmljivanja.setText(String.valueOf(stavkeIznajmljivanja.size()));
        txtNapomena.setText("");
    }//GEN-LAST:event_btnUnesiStavkuActionPerformed

    private void btnIzbaciIzIznajmljivanjaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzbaciIzIznajmljivanjaActionPerformed
        int red = tblStavkeIznajmljivanja.getSelectedRow();

        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Morate izabrati jednu knjigu za izbacivanje.", "Upozorenje", JOptionPane.WARNING_MESSAGE);
            return;
        }

        TableModelStavkeIznajmljivanja model = (TableModelStavkeIznajmljivanja) tblStavkeIznajmljivanja.getModel();
        StavkaIznajmljivanja zaBrisanje = model.getStavke().get(red);
        stavkeIznajmljivanja.remove(zaBrisanje);

        tblStavkeIznajmljivanja.setModel(new TableModelStavkeIznajmljivanja(stavkeIznajmljivanja));
        lblBrojStavkiIznajmljivanja.setText(String.valueOf(stavkeIznajmljivanja.size()));
    }//GEN-LAST:event_btnIzbaciIzIznajmljivanjaActionPerformed

    private void btnKreirajIznajmljivanjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKreirajIznajmljivanjeActionPerformed
        //Unos datuma
        LocalDate dIznajmljivanja;
        LocalDate dVracanja;
        try {
            dIznajmljivanja = LocalDate.parse(txtDatumIznajmljivanja.getText(), formatter);
            dVracanja = LocalDate.parse(txtRokVracanja.getText(), formatter);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Datum nije u odgovarajucem formatu", "Greska pri unosu datuma", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (dVracanja.isBefore(dIznajmljivanja)) {
            JOptionPane.showMessageDialog(this, "Datum iznajmljivanja mora biti pre datuma vraćanja.", "Greska pri unosu datuma", JOptionPane.ERROR_MESSAGE);
        }

        int brstavki = stavkeIznajmljivanja.size();
        Status status = (Status) cbStatus.getSelectedItem();

        if (stavkeIznajmljivanja.size() + izabraniClan.getBrTrenutnihKnjiga() > izabraniClan.getTipClanstva().getMaxIznajmljenihKnjiga()) {
            JOptionPane.showMessageDialog(this, "Ovo iznajmljivanje prekoračuje dozvoljeni limit za broj iznajmljenih knjiga", "Prekoračenje limita", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Clan clanSaIzmenom = new Clan(izabraniClan.getIdClan(), izabraniClan.getIme(), izabraniClan.getPrezime(), izabraniClan.getEmail(), izabraniClan.getLozinka(), izabraniClan.getDatumUclanjenja(), izabraniClan.getDatumIstekaClanarine(), izabraniClan.getTrajanjeClanarine(), izabraniClan.getBrTrenutnihKnjiga() + stavkeIznajmljivanja.size(), izabraniClan.getTipClanstva());

        Iznajmljivanje novoIznajmljivanje = new Iznajmljivanje(bibliotekar, clanSaIzmenom, dIznajmljivanja, dVracanja, brstavki, status);

        IznajmljivanjeSaStavkama zaUnos = new IznajmljivanjeSaStavkama(novoIznajmljivanje, stavkeIznajmljivanja);

        int rezultat = communication.dodajIznajmljivanjeSaStavkama(zaUnos);
        if (rezultat == 0) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške pri unosu iznajmljivanja", "Greška", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Uspešan unos iznajmljivanja", "Uspeh", JOptionPane.INFORMATION_MESSAGE);

        }

        parent.dobaviSveClanove();
        this.dispose();
    }//GEN-LAST:event_btnKreirajIznajmljivanjeActionPerformed

    private void btnRucnoDodavanjeDatumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRucnoDodavanjeDatumaActionPerformed
        txtDatumIznajmljivanja.setEnabled(true);
        txtRokVracanja.setEnabled(true);
    }//GEN-LAST:event_btnRucnoDodavanjeDatumaActionPerformed

    private void btnResetujFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetujFilterActionPerformed
        txtNapomena.setText("");
        popuniTabeluKnjigama();
    }//GEN-LAST:event_btnResetujFilterActionPerformed

    private void btnPromeniNapomenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromeniNapomenuActionPerformed
        int red = tblStavkeIznajmljivanja.getSelectedRow();

        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Morate izabrati stavku iz tabele kojoj želite da promenite napomenu.", "Stavka iznajmljivanja nije izabrana", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String novaNapomena = txtPromeniNapomenu.getText().trim();

        TableModelStavkeIznajmljivanja model = (TableModelStavkeIznajmljivanja) tblStavkeIznajmljivanja.getModel();
        StavkaIznajmljivanja stavka = model.getStavke().get(red);

        stavka.setNapomena(novaNapomena);

        tblStavkeIznajmljivanja.setModel(new TableModelStavkeIznajmljivanja(stavkeIznajmljivanja));
        txtPromeniNapomenu.setText("");
    }//GEN-LAST:event_btnPromeniNapomenuActionPerformed

    private void btnIzmeniIznajmljivanjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniIznajmljivanjeActionPerformed
        //Unos datuma
        LocalDate dIznajmljivanja;
        LocalDate dVracanja;
        try {
            dIznajmljivanja = LocalDate.parse(txtDatumIznajmljivanja.getText(), formatter);
            dVracanja = LocalDate.parse(txtRokVracanja.getText(), formatter);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Datum nije u odgovarajucem formatu", "Greska pri unosu datuma", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (dVracanja.isBefore(dIznajmljivanja)) {
            JOptionPane.showMessageDialog(this, "Datum iznajmljivanja mora biti pre datuma vraćanja.", "Greska pri unosu datuma", JOptionPane.ERROR_MESSAGE);
        }

        int brstavki = stavkeIznajmljivanja.size();
        Status status = (Status) cbStatus.getSelectedItem();

        Clan izmenjeniClan;
        if (status.equals(Status.VRACENO)) {
            izmenjeniClan = new Clan(izabraniClan.getIdClan(), izabraniClan.getIme(), izabraniClan.getPrezime(), izabraniClan.getEmail(), izabraniClan.getLozinka(), izabraniClan.getDatumUclanjenja(), izabraniClan.getDatumIstekaClanarine(), izabraniClan.getTrajanjeClanarine(), izabraniClan.getBrTrenutnihKnjiga() - stavkeIznajmljivanja.size(), izabraniClan.getTipClanstva());
        } else {
            izmenjeniClan = izabraniClan;
        }

        Iznajmljivanje novoIznajmljivanje = new Iznajmljivanje(izabranoIznajmljivanje.getIdIznajmljivanje(), bibliotekar, izmenjeniClan, dIznajmljivanja, dVracanja, brstavki, status);

        IznajmljivanjeSaStavkama zaUnos = new IznajmljivanjeSaStavkama(novoIznajmljivanje, stavkeIznajmljivanja);

        int rezultat = communication.izmeniIznajmljivanjeSaStavkama(zaUnos);
        if (rezultat == 0) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške pri izmeni iznajmljivanja", "Greška", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Uspešna izmena iznajmljivanja", "Uspeh", JOptionPane.INFORMATION_MESSAGE);

        }

        parent.dobaviSveClanove();
        this.dispose();
    }//GEN-LAST:event_btnIzmeniIznajmljivanjeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFiltriraj;
    private javax.swing.JButton btnIzbaciIzIznajmljivanja;
    private javax.swing.JButton btnIzmeniIznajmljivanje;
    private javax.swing.JButton btnKreirajIznajmljivanje;
    private javax.swing.JButton btnOdustani;
    private javax.swing.JButton btnPromeniNapomenu;
    private javax.swing.JButton btnResetujFilter;
    private javax.swing.JButton btnRucnoDodavanjeDatuma;
    private javax.swing.JButton btnUnesiStavku;
    private javax.swing.JComboBox<Status> cbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblBibliotekar;
    private javax.swing.JLabel lblBrojStavkiIznajmljivanja;
    private javax.swing.JLabel lblClan;
    private javax.swing.JLabel lblKreirajNovoIzanjmljivanje;
    private javax.swing.JLabel lblPromeniNapomenu;
    private javax.swing.JLabel lblUnesiNapomenu;
    private javax.swing.JTable tblKnjige;
    private javax.swing.JTable tblStavkeIznajmljivanja;
    private javax.swing.JTextField txtAutor;
    private javax.swing.JTextField txtDatumIznajmljivanja;
    private javax.swing.JTextField txtNapomena;
    private javax.swing.JTextField txtNaslov;
    private javax.swing.JTextField txtPromeniNapomenu;
    private javax.swing.JTextField txtRokVracanja;
    // End of variables declaration//GEN-END:variables

    private void dodavanjeIznajmljivanja() {
        setTitle("Kreiranje novog iznajmljivanja");

        lblBibliotekar.setText(bibliotekar.toString());
        lblClan.setText(izabraniClan.toString());
        txtDatumIznajmljivanja.setText(LocalDate.now().format(formatter));
        txtRokVracanja.setText((LocalDate.now().plusWeeks(2)).format(formatter));
        txtDatumIznajmljivanja.setEnabled(false);
        txtRokVracanja.setEnabled(false);
        lblBrojStavkiIznajmljivanja.setText(String.valueOf(stavkeIznajmljivanja.size()));
        cbStatus.setSelectedItem(Status.AKTIVNO);
        cbStatus.setEnabled(false);
        btnIzmeniIznajmljivanje.setVisible(false);
        lblPromeniNapomenu.setVisible(false);
        txtPromeniNapomenu.setVisible(false);
        btnPromeniNapomenu.setVisible(false);
        lblKreirajNovoIzanjmljivanje.setVisible(false);

    }

    private void izmenaIznajmljivanja() {
        setTitle("Izmena izabranog iznajmljivanja");

        lblBibliotekar.setText(bibliotekar.toString());
        lblClan.setText(izabraniClan.toString());
        txtDatumIznajmljivanja.setText(izabranoIznajmljivanje.getDatumIznajmljivanja().format(formatter));
        txtRokVracanja.setText(izabranoIznajmljivanje.getRokVracanja().format(formatter));
        btnRucnoDodavanjeDatuma.setVisible(false);
        lblBrojStavkiIznajmljivanja.setText(String.valueOf(stavkeIznajmljivanja.size()));
        cbStatus.setSelectedItem(izabranoIznajmljivanje.getStatus());
        TableModelStavkeIznajmljivanja model = new TableModelStavkeIznajmljivanja(stavkeIznajmljivanja);
        tblStavkeIznajmljivanja.setModel(model);
        btnKreirajIznajmljivanje.setVisible(false);

        //Onemogucavanje dodavanje novih stavki iznajmljivanja
        txtNapomena.setEnabled(false);
        btnUnesiStavku.setEnabled(false);
        txtNaslov.setEnabled(false);
        txtAutor.setEnabled(false);
        btnFiltriraj.setEnabled(false);
        btnResetujFilter.setEnabled(false);
        btnIzbaciIzIznajmljivanja.setVisible(false);

    }

    private void popuniTabeluKnjigama() {
        if (sveKnjige != null) {
            TableModelKnjiga model = new TableModelKnjiga(sveKnjige);
            tblKnjige.setModel(model);
        }
    }

    public void dobaviSveKnjige() {
        sveKnjige = communication.vratiSveKnjige();
        popuniTabeluKnjigama();
    }

    private void ucitajStavkeIznajmljivanja() {
        StavkaIznajmljivanja stavkaZaPretragu = new StavkaIznajmljivanja();
        stavkaZaPretragu.setIznajmljivanje(izabranoIznajmljivanje);
        stavkeIznajmljivanja = communication.vratiSveStavkeIznajmljivanja(stavkaZaPretragu);
    }
}
