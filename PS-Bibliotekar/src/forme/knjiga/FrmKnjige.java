/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme.knjiga;

import communication.Communication;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import model.Knjiga;

/**
 *
 * @author kacan
 */
public class FrmKnjige extends javax.swing.JFrame {

    Communication communication;
    private List<Knjiga> sveKnjige;

    /**
     * Creates new form FrmKnjige
     */
    public FrmKnjige() {
        communication = Communication.getInstance();
        initComponents();
        setTitle("Rad sa knjigama");
        dobaviSveKnjige();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblKnjige = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNaslov = new javax.swing.JTextField();
        txtAutor = new javax.swing.JTextField();
        btnFiltriraj = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnDodaj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        btnZatvori = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblKnjige.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Naslov", "ISBN", "Autor", "Izdavac"
            }
        ));
        jScrollPane1.setViewportView(tblKnjige);

        jLabel1.setText("Filtriraj po naslovu:");

        jLabel2.setText("Filtriraj po autoru:");

        btnFiltriraj.setText("Filtriraj");
        btnFiltriraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrirajActionPerformed(evt);
            }
        });

        btnDodaj.setText("Dodaj novu knjigu");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Uredi izabranu knjigu");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obrisi izabranu knjigu");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        btnZatvori.setText("Zatvori");
        btnZatvori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZatvoriActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNaslov, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                            .addComponent(txtAutor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFiltriraj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDodaj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIzmeni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnObrisi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                        .addComponent(btnZatvori)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNaslov, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnFiltriraj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(1, 1, 1)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDodaj)
                    .addComponent(btnIzmeni)
                    .addComponent(btnObrisi)
                    .addComponent(btnZatvori))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        FrmDodajIzmeniKnjiga frmDodajIzmeniKnjiga = new FrmDodajIzmeniKnjiga(this, null);
        frmDodajIzmeniKnjiga.setVisible(true);
        frmDodajIzmeniKnjiga.setLocationRelativeTo(null);
    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnZatvoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZatvoriActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnZatvoriActionPerformed

    private void btnFiltrirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrirajActionPerformed
        String naslovFilter = txtNaslov.getText().trim();
        String autorFilter = txtAutor.getText().trim();

        if (sveKnjige == null || sveKnjige.isEmpty()) {
            return;
        }

        // Filtriranje liste knjiga
        List<Knjiga> filtriraneKnjige = new ArrayList<>();
        for (Knjiga knjiga : sveKnjige) {
            boolean matchesNaslov = (naslovFilter.isEmpty() || knjiga.getNaslov().toLowerCase().contains(naslovFilter.toLowerCase()));
            boolean matchesAutor = (autorFilter.isEmpty() || knjiga.getAutor().toLowerCase().contains(autorFilter.toLowerCase()));

            // Ako knjizi odgovaraju oba filtera (ili samo jedan od njih), dodajemo je u filtriranu listu
            if (matchesNaslov && matchesAutor) {
                filtriraneKnjige.add(knjiga);
            }
        }

        TableModelKnjiga model = new TableModelKnjiga(filtriraneKnjige);
        tblKnjige.setModel(model);
    }//GEN-LAST:event_btnFiltrirajActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        int izbor = tblKnjige.getSelectedRow();
        TableModelKnjiga model = (TableModelKnjiga) tblKnjige.getModel();
        Knjiga izabrana = model.getKnjiga(izbor);

        FrmDodajIzmeniKnjiga frmDodajIzmeniKnjiga = new FrmDodajIzmeniKnjiga(this, izabrana);
        frmDodajIzmeniKnjiga.setVisible(true);
        frmDodajIzmeniKnjiga.setLocationRelativeTo(null);
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        int[] izabraniRedovi = tblKnjige.getSelectedRows();

        if (izabraniRedovi.length == 0) {
            JOptionPane.showMessageDialog(this, "Nema selektovanih knjiga za brisanje!", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int izbor = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da želite da obrišete izabrane knjige?", "Potvrda brisanja", JOptionPane.YES_NO_OPTION);

        if (izbor == JOptionPane.YES_OPTION) {
            for (int i = 0; i < izabraniRedovi.length; i++) {
                TableModelKnjiga model = (TableModelKnjiga) tblKnjige.getModel();
                Knjiga knjigaZaBrisanje = model.getKnjiga(izabraniRedovi[i]);

                int uspeh = communication.obrisiKnjigu(knjigaZaBrisanje);

                if (uspeh != 0) {
                    JOptionPane.showMessageDialog(this, "Knjiga " + knjigaZaBrisanje.getNaslov() + " je uspešno obrisana.", "Uspešno brisanje", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Došlo je do greške pri brisanju knjige " + knjigaZaBrisanje.getNaslov() + ".", "Greška", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
        dobaviSveKnjige();
    }//GEN-LAST:event_btnObrisiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnFiltriraj;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnZatvori;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tblKnjige;
    private javax.swing.JTextField txtAutor;
    private javax.swing.JTextField txtNaslov;
    // End of variables declaration//GEN-END:variables
    private void popuniTabeluKnjigama() {
        if (sveKnjige != null) {
            TableModelKnjiga model = new TableModelKnjiga(sveKnjige);
            tblKnjige.setModel(model);
        }
    }

    public void dobaviSveKnjige() {
        sveKnjige = communication.vratiSveKnjige();
        popuniTabeluKnjigama();
    }
}
