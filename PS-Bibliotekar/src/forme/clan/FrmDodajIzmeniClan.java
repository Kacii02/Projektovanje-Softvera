/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme.clan;

import communication.Communication;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.List;
import javax.swing.JOptionPane;
import model.Clan;
import model.TipClanstva;

/**
 *
 * @author kacan
 */
public class FrmDodajIzmeniClan extends javax.swing.JFrame {

    FrmClan parent;
    Clan izabraniClan;
    Communication communication;
    DateTimeFormatter formatter;

    /**
     * Creates new form FrmDodajIzmeniClan
     */
    public FrmDodajIzmeniClan(FrmClan parent, Clan izabraniClan) {
        this.parent = parent;
        this.izabraniClan = izabraniClan;
        formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        communication = Communication.getInstance();
        initComponents();
        popuniCbTipClanstva();
        if (izabraniClan == null) {
            dodavanjeClana();
        } else {
            izmenaClana();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtBrojPozajmljenihKnjiga = new javax.swing.JTextField();
        txtTrajanjeClanarine = new javax.swing.JTextField();
        txtDatumIstekaClanarine = new javax.swing.JTextField();
        txtDatumUclanjenja = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPrezime = new javax.swing.JTextField();
        txtIme = new javax.swing.JTextField();
        cbTipClanstva = new javax.swing.JComboBox<>();
        btnDodaj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        btnOdustani = new javax.swing.JButton();
        passLozinka = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Ime:");

        jLabel2.setText("Prezime:");

        jLabel3.setText("Email:");

        jLabel4.setText("Lozinka:");

        jLabel5.setText("Datum uclanjenja:");

        jLabel6.setText("Datum isteka clanarine:");

        jLabel7.setText("Trajanje clanarine:");

        jLabel8.setText("Broj pozajmljenih knjiga:");

        jLabel9.setText("Tip clanstva:");

        txtTrajanjeClanarine.setEditable(false);

        txtDatumIstekaClanarine.setEditable(false);

        txtDatumUclanjenja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDatumUclanjenjaActionPerformed(evt);
            }
        });

        txtIme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtImeActionPerformed(evt);
            }
        });

        btnDodaj.setText("Dodaj");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnOdustani.setText("Odustani");
        btnOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdustaniActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtBrojPozajmljenihKnjiga)
                    .addComponent(txtTrajanjeClanarine)
                    .addComponent(txtDatumIstekaClanarine)
                    .addComponent(txtDatumUclanjenja)
                    .addComponent(txtEmail)
                    .addComponent(txtPrezime)
                    .addComponent(txtIme)
                    .addComponent(cbTipClanstva, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnIzmeni, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(btnDodaj, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addComponent(btnOdustani))
                    .addComponent(passLozinka))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(passLozinka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDatumUclanjenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDatumIstekaClanarine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtTrajanjeClanarine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtBrojPozajmljenihKnjiga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cbTipClanstva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnOdustani)
                    .addComponent(btnDodaj))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnIzmeni)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtImeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtImeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtImeActionPerformed

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        // Validacija unetih podataka
        if (txtIme.getText().isEmpty() || txtPrezime.getText().isEmpty() || txtEmail.getText().isEmpty() || passLozinka.getPassword().length == 0 || txtDatumUclanjenja.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Molimo unesite sve podatke.", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Kreiraj novog člana
        Clan noviClan = new Clan();
        noviClan.setIme(txtIme.getText());
        noviClan.setPrezime(txtPrezime.getText());
        noviClan.setEmail(txtEmail.getText());
        noviClan.setLozinka(new String(passLozinka.getPassword()));
        try {
            noviClan.setDatumUclanjenja(LocalDate.parse(txtDatumUclanjenja.getText(), DateTimeFormatter.ofPattern("dd.MM.yyyy")));
            noviClan.setDatumIstekaClanarine(LocalDate.parse(txtDatumIstekaClanarine.getText(), DateTimeFormatter.ofPattern("dd.MM.yyyy")));
            if(noviClan.getDatumUclanjenja().isBefore(LocalDate.now())){
                JOptionPane.showMessageDialog(this, "Ne mozete uneti datum pre danasnjeg.", "Greska pri unosu datuma", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Datum nije u odgovarajucem formatu", "Greska pri unosu datuma", JOptionPane.ERROR_MESSAGE);
            return;
        }
        noviClan.setTrajanjeClanarine(Integer.parseInt(txtTrajanjeClanarine.getText()));
        noviClan.setBrTrenutnihKnjiga(Integer.parseInt(txtBrojPozajmljenihKnjiga.getText()));
        noviClan.setTipClanstva((TipClanstva) cbTipClanstva.getSelectedItem());

        // Automatski izračunaj datum isteka i trajanje
        azurirajDatumITrajanje();

        int uspesno = communication.dodajClana(noviClan);
        if (uspesno != 0) {
            JOptionPane.showMessageDialog(this, "Član je uspešno dodat.", "Uspeh", JOptionPane.INFORMATION_MESSAGE);
            parent.dobaviSveClanove();
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Došlo je do greške pri dodavanju člana.", "Greška", JOptionPane.ERROR_MESSAGE);
        }

        parent.dobaviSveClanove();
    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed

        if (txtIme.getText().isEmpty() || txtPrezime.getText().isEmpty() || txtEmail.getText().isEmpty() || passLozinka.getPassword().length == 0 || txtDatumUclanjenja.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Molimo unesite sve obavezne podatke!", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Izmeni člana
        izabraniClan.setIme(txtIme.getText());
        izabraniClan.setPrezime(txtPrezime.getText());
        izabraniClan.setEmail(txtEmail.getText());
        izabraniClan.setLozinka(new String(passLozinka.getPassword()));
        izabraniClan.setBrTrenutnihKnjiga(Integer.parseInt(txtBrojPozajmljenihKnjiga.getText()));
        try {
            izabraniClan.setDatumUclanjenja(LocalDate.parse(txtDatumUclanjenja.getText(), DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Datum nije u odgovarajucem formatu", "Greska", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        izabraniClan.setTipClanstva((TipClanstva) cbTipClanstva.getSelectedItem());

        // Automatski izračunaj datum isteka i trajanje
        azurirajDatumITrajanje();

        int uspesno = communication.izmeniClana(izabraniClan);
        if (uspesno
                != 0) {
            JOptionPane.showMessageDialog(this, "Član je uspešno izmenjen.", "Uspeh", JOptionPane.INFORMATION_MESSAGE);
            parent.dobaviSveClanove();
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Došlo je do greške pri izmeni člana.", "Greška", JOptionPane.ERROR_MESSAGE);
        }

        parent.dobaviSveClanove();
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdustaniActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnOdustaniActionPerformed

    private void txtDatumUclanjenjaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDatumUclanjenjaActionPerformed
        azurirajDatumITrajanje();
    }//GEN-LAST:event_txtDatumUclanjenjaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnOdustani;
    private javax.swing.JComboBox<TipClanstva> cbTipClanstva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField passLozinka;
    private javax.swing.JTextField txtBrojPozajmljenihKnjiga;
    private javax.swing.JTextField txtDatumIstekaClanarine;
    private javax.swing.JTextField txtDatumUclanjenja;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtPrezime;
    private javax.swing.JTextField txtTrajanjeClanarine;
    // End of variables declaration//GEN-END:variables

    private void dodavanjeClana() {
        setTitle("Dodavanje novog clana");
        btnIzmeni.setVisible(false);
        txtDatumIstekaClanarine.setEnabled(false);
        txtTrajanjeClanarine.setEnabled(false);
        txtBrojPozajmljenihKnjiga.setText("0");
        txtBrojPozajmljenihKnjiga.setEnabled(false);
        txtDatumUclanjenja.setText(LocalDate.now().format(formatter));
        azurirajDatumITrajanje();
    }

    private void izmenaClana() {
        setTitle("Izmena clana");
        btnDodaj.setVisible(false);
        txtDatumUclanjenja.setEnabled(false);
        txtDatumIstekaClanarine.setEnabled(false);
        txtTrajanjeClanarine.setEnabled(false);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");

        txtIme.setText(izabraniClan.getIme());
        txtPrezime.setText(izabraniClan.getPrezime());
        txtEmail.setText(izabraniClan.getEmail());
        passLozinka.setText(izabraniClan.getLozinka());
        txtDatumUclanjenja.setText(izabraniClan.getDatumUclanjenja().format(formatter));
        txtDatumIstekaClanarine.setText(izabraniClan.getDatumIstekaClanarine().format(formatter));
        txtTrajanjeClanarine.setText(String.valueOf(izabraniClan.getTrajanjeClanarine()));
        txtBrojPozajmljenihKnjiga.setText(String.valueOf(izabraniClan.getBrTrenutnihKnjiga()));
        cbTipClanstva.setSelectedItem(izabraniClan.getTipClanstva());
    }

    private void popuniCbTipClanstva() {
        List<TipClanstva> sviTipovi = communication.vratiSveTipoveClanstva();
        for (TipClanstva tc : sviTipovi) {
            cbTipClanstva.addItem(tc);
        }
    }

    private void azurirajDatumITrajanje() {

        // Ako datum uclanjenja nije prazan
        if (!txtDatumUclanjenja.getText().isEmpty()) {
            try {
                // Ucitaj datum učlanjenja
                LocalDate datumUclanjenja = LocalDate.parse(txtDatumUclanjenja.getText(), formatter);

                // Izracunaj datum isteka 
                LocalDate datumIsteka = datumUclanjenja.plusYears(1);

                // Izracunaj trajanje u mesecima
                int trajanje = (int) ChronoUnit.MONTHS.between(datumUclanjenja, datumIsteka);

                // Postavi te vrednosti u polja
                txtDatumIstekaClanarine.setText(datumIsteka.format(formatter));
                txtTrajanjeClanarine.setText(String.valueOf(trajanje));
            } catch (Exception e) {
                // Ako je datum u pogresnom formatu, prikazi gresku
                JOptionPane.showMessageDialog(this, "Datum uclanjenja nije u validnom formatu (dd.MM.yyyy)", "Greška", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
